name: Merge PR to development or hotfix

on:
  pull_request:
    types:
      - closed
    branches:
      - development
      - hotfix

jobs:
  if_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "setting variables"
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          echo "version=latest" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Publish vidvec amd64 benchmark to dockerhub
        uses: elgohr/Publish-Docker-Github-Action@main
        with:
          username: tattletech
          password: ${{ secrets.DOCKER_PASSWORD }}
          name: tattletech/feluda-operator-vidvec
          workdir: src/
          dockerfile: benchmark/vidvec/Dockerfile.vid_vec_rep_resnet
          tags: benchmark-amd64-${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.version }}
          platforms: linux/amd64

      - name: Publish vidvec arm64 benchmark to dockerhub
        uses: elgohr/Publish-Docker-Github-Action@main
        with:
          username: tattletech
          password: ${{ secrets.DOCKER_PASSWORD }}
          name: tattletech/feluda-operator-vidvec
          workdir: src/
          dockerfile: benchmark/vidvec/Dockerfile.vid_vec_rep_resnet.graviton
          tags: benchmark-arm64-${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.version }}
          platforms: linux/arm64

#      - name: Publish vidvec amd64 worker to dockerhub
#        uses: elgohr/Publish-Docker-Github-Action@main
#        with:
#          username: tattletech
#          password: ${{ secrets.DOCKER_PASSWORD }}
#          name: tattletech/feluda-operator-vidvec
#          workdir: src/
#          dockerfile: worker/vidvec/Dockerfile.video_worker
#          tags: worker-amd64-${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.version }}
#          platforms: linux/amd64

#      - name: deploy to cluster
#        uses: steebchen/kubectl@v2.0.0
#        with: # defaults to latest kubectl binary version
#          config: ${{ secrets.PROD_KUBE_CONFIG_DATA }}
#          command: set image --record deployment/feluda-server feluda-server=tattletech/feluda-server:${{ steps.vars.outputs.sha_short }}
#      - name: verify deployment
#        uses: steebchen/kubectl@v2.0.0
#        with:
#          config: ${{ secrets.PROD_KUBE_CONFIG_DATA }}
#          version: v1.21.0 # specify kubectl binary version explicitly
#          command: rollout status deployment/feluda-server
